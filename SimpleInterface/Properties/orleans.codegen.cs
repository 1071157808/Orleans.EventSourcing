//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Orleans.EventSourcing.SimpleInterface
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Orleans.EventSourcing.SimpleInterface;
    using Orleans;
    using Orleans.Runtime;
    using Orleans.EventSourcing;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class TransferTransactionFactory
    {
        

                        public static Orleans.EventSourcing.SimpleInterface.ITransferTransaction GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(Orleans.EventSourcing.SimpleInterface.ITransferTransaction), 1895808213, primaryKey));
                        }

                        public static Orleans.EventSourcing.SimpleInterface.ITransferTransaction GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(Orleans.EventSourcing.SimpleInterface.ITransferTransaction), 1895808213, primaryKey, grainClassNamePrefix));
                        }

            public static Orleans.EventSourcing.SimpleInterface.ITransferTransaction Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return TransferTransactionReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.ITran" +
            "sferTransaction")]
        internal class TransferTransactionReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Orleans.EventSourcing.SimpleInterface.ITransferTransaction
        {
            

            public static Orleans.EventSourcing.SimpleInterface.ITransferTransaction Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (Orleans.EventSourcing.SimpleInterface.ITransferTransaction) global::Orleans.Runtime.GrainReference.CastInternal(typeof(Orleans.EventSourcing.SimpleInterface.ITransferTransaction), (global::Orleans.Runtime.GrainReference gr) => { return new TransferTransactionReference(gr);}, grainRef, 1895808213);
            }
            
            protected internal TransferTransactionReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal TransferTransactionReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1895808213;
                }
            }
            
            protected override string InterfaceName
            {
                get
                {
                    return "Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.ITran" +
                        "sferTransaction";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                TransferTransactionReference input = ((TransferTransactionReference)(original));
                return ((TransferTransactionReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                TransferTransactionReference input = ((TransferTransactionReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return TransferTransactionReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1097320095));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return TransferTransactionMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.Initialize(System.Guid fromAccountId, System.Guid toAccountId, decimal amount)
            {

                return base.InvokeMethodAsync<object>(518927232, new object[] {fromAccountId, toAccountId, amount} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.ConfirmAccountValidatePassed()
            {

                return base.InvokeMethodAsync<object>(901321164, new object[] {} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.ConfirmTransferOutPreparation()
            {

                return base.InvokeMethodAsync<object>(1613436135, new object[] {} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.ConfirmTransferInPreparation()
            {

                return base.InvokeMethodAsync<object>(108736162, new object[] {} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.ConfirmTransferOut()
            {

                return base.InvokeMethodAsync<object>(-1176500040, new object[] {} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.ConfirmTransferIn()
            {

                return base.InvokeMethodAsync<object>(1990501567, new object[] {} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransaction.Cancel(Orleans.EventSourcing.SimpleInterface.TransactionFaileReason reason)
            {

                return base.InvokeMethodAsync<object>(751141822, new object[] {reason} );
            }
            
            System.Threading.Tasks.Task<Orleans.EventSourcing.SimpleInterface.TransactionStatus> Orleans.EventSourcing.SimpleInterface.ITransferTransaction.GetStatus()
            {

                return base.InvokeMethodAsync<Orleans.EventSourcing.SimpleInterface.TransactionStatus>(-1251605435, new object[] {} );
            }
            
            System.Threading.Tasks.Task<Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo> Orleans.EventSourcing.SimpleInterface.ITransferTransaction.GetTransferTransactionInfo()
            {

                return base.InvokeMethodAsync<Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo>(1419660080, new object[] {} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.ITran" +
        "sferTransaction", 1895808213)]
    internal class TransferTransactionMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1895808213;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {{                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1895808213:  // ITransferTransaction
                        switch (methodId)
                        {
                            case 518927232: 
                                return ((ITransferTransaction)grain).Initialize((Guid)arguments[0], (Guid)arguments[1], (Decimal)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 901321164: 
                                return ((ITransferTransaction)grain).ConfirmAccountValidatePassed().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1613436135: 
                                return ((ITransferTransaction)grain).ConfirmTransferOutPreparation().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 108736162: 
                                return ((ITransferTransaction)grain).ConfirmTransferInPreparation().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1176500040: 
                                return ((ITransferTransaction)grain).ConfirmTransferOut().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1990501567: 
                                return ((ITransferTransaction)grain).ConfirmTransferIn().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 751141822: 
                                return ((ITransferTransaction)grain).Cancel((TransactionFaileReason)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1251605435: 
                                return ((ITransferTransaction)grain).GetStatus().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1419660080: 
                                return ((ITransferTransaction)grain).GetTransferTransactionInfo().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1097320095:  // IGrainWithGuidKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }}
            catch(Exception ex)
            {{
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }}
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1895808213:  // ITransferTransaction
                    switch (methodId)
                    {
                        case 518927232:
                            return "Initialize";
                    case 901321164:
                            return "ConfirmAccountValidatePassed";
                    case 1613436135:
                            return "ConfirmTransferOutPreparation";
                    case 108736162:
                            return "ConfirmTransferInPreparation";
                    case -1176500040:
                            return "ConfirmTransferOut";
                    case 1990501567:
                            return "ConfirmTransferIn";
                    case 751141822:
                            return "Cancel";
                    case -1251605435:
                            return "GetStatus";
                    case 1419660080:
                            return "GetTransferTransactionInfo";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1097320095:  // IGrainWithGuidKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class TransferTransactionProcessManagerFactory
    {
        

                        public static Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager), 2060187244, primaryKey));
                        }

                        public static Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager), 2060187244, primaryKey, grainClassNamePrefix));
                        }

            public static Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return TransferTransactionProcessManagerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.ITran" +
            "sferTransactionProcessManager")]
        internal class TransferTransactionProcessManagerReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager
        {
            

            public static Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager) global::Orleans.Runtime.GrainReference.CastInternal(typeof(Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager), (global::Orleans.Runtime.GrainReference gr) => { return new TransferTransactionProcessManagerReference(gr);}, grainRef, 2060187244);
            }
            
            protected internal TransferTransactionProcessManagerReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal TransferTransactionProcessManagerReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 2060187244;
                }
            }
            
            protected override string InterfaceName
            {
                get
                {
                    return "Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.ITran" +
                        "sferTransactionProcessManager";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                TransferTransactionProcessManagerReference input = ((TransferTransactionProcessManagerReference)(original));
                return ((TransferTransactionProcessManagerReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                TransferTransactionProcessManagerReference input = ((TransferTransactionProcessManagerReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return TransferTransactionProcessManagerReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == 1928988877));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return TransferTransactionProcessManagerMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.ITransferTransactionProcessManager.ProcessTransferTransaction(System.Guid fromAccountId, System.Guid toAccountId, decimal amount)
            {

                return base.InvokeMethodAsync<object>(1500745786, new object[] {fromAccountId, toAccountId, amount} , options:  global::Orleans.CodeGeneration.InvokeMethodOptions.Unordered);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.ITran" +
        "sferTransactionProcessManager", 2060187244)]
    internal class TransferTransactionProcessManagerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 2060187244;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {{                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 2060187244:  // ITransferTransactionProcessManager
                        switch (methodId)
                        {
                            case 1500745786: 
                                return ((ITransferTransactionProcessManager)grain).ProcessTransferTransaction((Guid)arguments[0], (Guid)arguments[1], (Decimal)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1928988877:  // IGrainWithIntegerKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }}
            catch(Exception ex)
            {{
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }}
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 2060187244:  // ITransferTransactionProcessManager
                    switch (methodId)
                    {
                        case 1500745786:
                            return "ProcessTransferTransaction";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1928988877:  // IGrainWithIntegerKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class BankAccountFactory
    {
        

                        public static Orleans.EventSourcing.SimpleInterface.IBankAccount GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(Orleans.EventSourcing.SimpleInterface.IBankAccount), -912346303, primaryKey));
                        }

                        public static Orleans.EventSourcing.SimpleInterface.IBankAccount GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(Orleans.EventSourcing.SimpleInterface.IBankAccount), -912346303, primaryKey, grainClassNamePrefix));
                        }

            public static Orleans.EventSourcing.SimpleInterface.IBankAccount Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return BankAccountReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.IBank" +
            "Account")]
        internal class BankAccountReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Orleans.EventSourcing.SimpleInterface.IBankAccount
        {
            

            public static Orleans.EventSourcing.SimpleInterface.IBankAccount Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (Orleans.EventSourcing.SimpleInterface.IBankAccount) global::Orleans.Runtime.GrainReference.CastInternal(typeof(Orleans.EventSourcing.SimpleInterface.IBankAccount), (global::Orleans.Runtime.GrainReference gr) => { return new BankAccountReference(gr);}, grainRef, -912346303);
            }
            
            protected internal BankAccountReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal BankAccountReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -912346303;
                }
            }
            
            protected override string InterfaceName
            {
                get
                {
                    return "Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.IBank" +
                        "Account";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                BankAccountReference input = ((BankAccountReference)(original));
                return ((BankAccountReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                BankAccountReference input = ((BankAccountReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return BankAccountReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1097320095));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return BankAccountMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<Orleans.EventSourcing.TaskMessage> Orleans.EventSourcing.SimpleInterface.IBankAccount.Initialize(System.Guid ownerId)
            {

                return base.InvokeMethodAsync<Orleans.EventSourcing.TaskMessage>(-1993006295, new object[] {ownerId} );
            }
            
            System.Threading.Tasks.Task<bool> Orleans.EventSourcing.SimpleInterface.IBankAccount.Validate()
            {

                return base.InvokeMethodAsync<System.Boolean>(1980500241, new object[] {} );
            }
            
            System.Threading.Tasks.Task<Orleans.EventSourcing.TaskMessage> Orleans.EventSourcing.SimpleInterface.IBankAccount.AddTransactionPreparation(System.Guid transactionId, Orleans.EventSourcing.SimpleInterface.TransactionType transactionType, Orleans.EventSourcing.SimpleInterface.PreparationType preparationType, decimal amount)
            {

                return base.InvokeMethodAsync<Orleans.EventSourcing.TaskMessage>(1417003246, new object[] {transactionId, transactionType, preparationType, amount} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.IBankAccount.CommitTransactionPreparation(System.Guid transactionId)
            {

                return base.InvokeMethodAsync<object>(-576022763, new object[] {transactionId} );
            }
            
            System.Threading.Tasks.Task Orleans.EventSourcing.SimpleInterface.IBankAccount.CancelTransactionPreparation(System.Guid transactionId)
            {

                return base.InvokeMethodAsync<object>(-1730429136, new object[] {transactionId} );
            }
            
            System.Threading.Tasks.Task<decimal> Orleans.EventSourcing.SimpleInterface.IBankAccount.GetBalance()
            {

                return base.InvokeMethodAsync<System.Decimal>(698066810, new object[] {} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Orleans.EventSourcing.SimpleInterface.Orleans.EventSourcing.SimpleInterface.IBank" +
        "Account", -912346303)]
    internal class BankAccountMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -912346303;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {{                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -912346303:  // IBankAccount
                        switch (methodId)
                        {
                            case -1993006295: 
                                return ((IBankAccount)grain).Initialize((Guid)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1980500241: 
                                return ((IBankAccount)grain).Validate().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1417003246: 
                                return ((IBankAccount)grain).AddTransactionPreparation((Guid)arguments[0], (TransactionType)arguments[1], (PreparationType)arguments[2], (Decimal)arguments[3]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -576022763: 
                                return ((IBankAccount)grain).CommitTransactionPreparation((Guid)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1730429136: 
                                return ((IBankAccount)grain).CancelTransactionPreparation((Guid)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 698066810: 
                                return ((IBankAccount)grain).GetBalance().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1097320095:  // IGrainWithGuidKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }}
            catch(Exception ex)
            {{
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }}
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -912346303:  // IBankAccount
                    switch (methodId)
                    {
                        case -1993006295:
                            return "Initialize";
                    case 1980500241:
                            return "Validate";
                    case 1417003246:
                            return "AddTransactionPreparation";
                    case -576022763:
                            return "CommitTransactionPreparation";
                    case -1730429136:
                            return "CancelTransactionPreparation";
                    case 698066810:
                            return "GetBalance";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1097320095:  // IGrainWithGuidKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Orleans_EventSourcing_SimpleInterface_TransferTransactionInfoSerialization
    {
        
        static Orleans_EventSourcing_SimpleInterface_TransferTransactionInfoSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo input = ((Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo)(original));
            Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo result = new Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Amount = ((Decimal)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Amount)));
            result.FromAccountId = ((Guid)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.FromAccountId)));
            result.ToAccountId = ((Guid)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.ToAccountId)));
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo input = ((Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Amount, stream, typeof(Decimal));
            Orleans.Serialization.SerializationManager.SerializeInner(input.FromAccountId, stream, typeof(Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ToAccountId, stream, typeof(Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo result = new Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo();
            result.Amount = ((Decimal)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Decimal), stream)));
            result.FromAccountId = ((Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Guid), stream)));
            result.ToAccountId = ((Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Orleans.EventSourcing.SimpleInterface.TransferTransactionInfo), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
